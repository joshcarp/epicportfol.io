
EchoService[~gRPC]:
    @description =:
        | EchoService is a basic service to test connections 
    @package = "itproject"
    @source_path = "api.proto"
    Echo(input <: itproject.EchoRequest)[~gRPC]:
        @description = ""
        @source_path = "api.proto"
        return ok <: itproject.EchoResponse

authenticate[~gRPC]:
    @description =:
        | authenticate is the miroservice that handles authentication and issues JWTs to 
        |use with other services 
    @package = "itproject"
    @source_path = "api.proto"
    Login(input <: itproject.LoginRequest)[~gRPC]:
        @description =:
            | Login is used to login and to acquire a jwt 
        @source_path = "api.proto"
        return ok <: itproject.LoginResponse
    Register(input <: itproject.RegisterRequest)[~gRPC]:
        @description =:
            | Register is used to register a user and acquire a jwt 
        @source_path = "api.proto"
        return ok <: itproject.RegisterResponse
    RenewJWT(input <: itproject.LoginRequest)[~gRPC]:
        @description =:
            | RenewJWT is used to reissue JWTs that have expired 
        @source_path = "api.proto"
        return ok <: itproject.LoginResponse

itproject:
    @package = "itproject"
    !type EchoRequest:
        @description =:
            | EchoRequest is the request object for EchoService 
        @source_path = "api.proto"
        message <: string:
            @json_tag = "message"
            @rpcId = "1"
    !type EchoResponse:
        @description =:
            | EchoResponse is the response from the EchoService 
        @source_path = "api.proto"
        message <: string:
            @json_tag = "message"
            @rpcId = "1"
    !type LoginRequest[~empty]:
        @description =:
            | LoginRequest is empty because the Bas64(username:password) is contained in the 
            |header of the request 
        @source_path = "api.proto"
        ...
    !type LoginResponse:
        @description =:
            | LoginRequest is the response object from Login that is used in bearer authentic
            |ation in the header: "Bearer <JWT>" 
        @source_path = "api.proto"
        jwt <: string:
            @json_tag = "jwt"
            @rpcId = "1"
    !type RegisterRequest:
        @description =:
            | RegisterRequest contains all the information to register the user in the databa
            |se 
        @source_path = "api.proto"
        email <: string:
            @json_tag = "email"
            @rpcId = "1"
        fullName <: string:
            @json_tag = "fullName"
            @rpcId = "3"
        password <: string:
            @json_tag = "password"
            @rpcId = "5"
        preferredName <: string:
            @json_tag = "preferredName"
            @rpcId = "4"
        username <: string:
            @json_tag = "username"
            @rpcId = "2"
    !type RegisterResponse:
        @description =:
            | RegisterResponse is the response from the registration services 
        @source_path = "api.proto"
        jwt <: string:
            @json_tag = "jwt"
            @rpcId = "2"
    !type RenewJWTRequest[~empty]:
        @description =:
            | RenewJWTRequest is empty becayse Bearer <JWT> should be used with this method 
        @source_path = "api.proto"
        ...
    !type RenewJWTResponse:
        @description =:
            | RenewJWTResponse is used to renew jwts 
        @source_path = "api.proto"
        jwt <: string:
            @json_tag = "jwt"
            @rpcId = "1"
    !type artifact:
        @description = ""
        @source_path = "api.proto"
        description <: string:
            @json_tag = "description"
            @rpcId = "4"
        link <: string:
            @json_tag = "link"
            @rpcId = "5"
        title <: string:
            @json_tag = "title"
            @rpcId = "3"
    !type getuserRequest:
        @description = ""
        @source_path = "api.proto"
        userid <: string:
            @json_tag = "userid"
            @rpcId = "1"
    !type job:
        @description = ""
        @source_path = "api.proto"
        company <: string:
            @json_tag = "company"
            @rpcId = "4"
        dates <: string:
            @json_tag = "dates"
            @rpcId = "2"
        description <: string:
            @json_tag = "description"
            @rpcId = "5"
        title <: string:
            @json_tag = "title"
            @rpcId = "3"
    !type profile:
        @description = ""
        @source_path = "api.proto"
        artifacts <: sequence of artifact
        bio <: string:
            @json_tag = "bio"
            @rpcId = "5"
        email <: string:
            @json_tag = "email"
            @rpcId = "2"
        full_name <: string:
            @json_tag = "fullName"
            @rpcId = "3"
        jobs <: sequence of job
        links <: sequence of string
        picture <: string:
            @json_tag = "picture"
            @rpcId = "4"
        username <: string:
            @json_tag = "username"
            @rpcId = "1"
    !type updateuserResponse[~empty]:
        @description = ""
        @source_path = "api.proto"
        ...

profiles[~gRPC]:
    @description = ""
    @package = "itproject"
    @source_path = "api.proto"
    getuser(input <: itproject.getuserRequest)[~gRPC]:
        @description = ""
        @source_path = "api.proto"
        return ok <: itproject.profile
    updateuser(input <: itproject.profile)[~gRPC]:
        @description = ""
        @source_path = "api.proto"
        return ok <: itproject.updateuserResponse

