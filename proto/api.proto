syntax = "proto3";

option go_package = "github.com/joshcarp/itproject/;itproject";
option java_multiple_files = true;
option java_package = "com.joshcarp.itproject";
option java_outer_classname = "pi";

package itproject;

/* authenticate is the miroservice that handles authentication and issues JWTs to use with other services */
service authenticate {

    /* Register is used to register a user and acquire a jwt */
    rpc Register(RegisterRequest) returns (RegisterResponse){};

    /* Login is used to login and to acquire a jwt */
    rpc Login(LoginRequest) returns (LoginResponse){};

    /* RenewJWT is used to reissue JWTs that have expired */
    rpc RenewJWT(LoginRequest) returns (LoginResponse){};
}

/* RegisterRequest contains all the information to register the user in the database */
message RegisterRequest {
    string email = 1;
    string username = 2;
    string fullName = 3;
    string preferredName = 4;
    string password = 5;
}

/* RegisterResponse is the response from the registration services */
message RegisterResponse{
    string jwt = 2;
}

/* LoginRequest is empty because the Bas64(username:password) is contained in the header of the request */
message LoginRequest {
}

/* LoginRequest is the response object from Login that is used in bearer authentication in the header: "Bearer <JWT>" */
message LoginResponse {
    string jwt = 1;
}

/* RenewJWTResponse is used to renew jwts */
message RenewJWTResponse {
    string jwt = 1;
}

/* RenewJWTRequest is empty becayse Bearer <JWT> should be used with this method */
message RenewJWTRequest {
}


/* --- EchoService --- */

/* EchoRequest is the request object for EchoService */
message EchoRequest {
    string message = 1;
}

/* EchoResponse is the response from the EchoService */
message EchoResponse {
    string message = 1;
}

/* EchoService is a basic service to test connections */
service EchoService {
    rpc Echo(EchoRequest) returns (EchoResponse);
}

/* --- Profiles service --- */

service profiles {
    rpc getuser(getuserRequest) returns (profile);
    rpc updateuser(profile) returns (updateuserResponse);
}

message getuserRequest {
    string userid = 1;
}

message profile {
    string username = 1;
    string email = 2;
    string full_name = 3;

    string picture = 4;
    string bio = 5;
    repeated job jobs = 6;
    repeated artifact artifacts = 7;
    repeated string links = 8;
}

message updateuserResponse{

}

message job {
    string dates = 2;
    string title = 3;
    string company = 4;
    string description = 5;
}

message artifact {
    string title = 3;
    string description = 4;
    string link = 5;
}

/* -- Upload Service -- */

service upload {
    rpc upload(uploadRequest) returns(uploadResponse);
}

message uploadRequest {
    string name = 1;
    bytes content = 2;
}

message uploadResponse {
    string url = 1;
}
