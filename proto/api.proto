syntax = "proto3";

option go_package = "github.com/joshcarp/itproject/;itproject";
option java_multiple_files = true;
option java_package = "com.joshcarp.itproject";
option java_outer_classname = "pi";

package itproject;

/* authenticate is the miroservice that handles authentication and issues JWTs to use with other services */
service authenticate {

    /* Register is used to register a user and acquire a jwt */
    rpc register(registerRequest) returns (registerResponse){};

    /* Login is used to login and to acquire a jwt */
    rpc login(loginRequest) returns (loginResponse){};

    /* verifyUser is used to verify if a user has permissions to edit an profile; used for frontend rendering */
    rpc verify(verifyRequest) returns (verifyResponse);
}

message verifyRequest {
    string username = 1;
}

message verifyResponse {
    bool verified = 1;
}



/* RegisterRequest contains all the information to register the user in the database */
message registerRequest {
    string email = 1;
    string username = 2;
    string fullName = 3;
    string preferredName = 4;
    string password = 5;
}

/* RegisterResponse is the response from the registration services */
message registerResponse{
    string jwt = 2;
}

/* LoginRequest is empty because the Bas64(username:password) is contained in the header of the request */
message loginRequest {
}

/* LoginRequest is the response object from Login that is used in bearer authentication in the header: "Bearer <JWT>" */
message loginResponse {
    string jwt = 1;
}

/* --- EchoService --- */

/* EchoRequest is the request object for EchoService */
message echoRequest {
    string message = 1;
}

/* EchoResponse is the response from the EchoService */
message echoResponse {
    string message = 1;
}

/* EchoService is a basic service to test connections */
service echo {

    /* echo is a method to test service deployments */
    rpc echo(echoRequest) returns (echoResponse);
}

/* --- Profiles service --- */

/* profiles is a service to retrieve and update a profile that is displayed */
service profiles {

    /* getuser gets a user from a userid */
    rpc getuser(getuserRequest) returns (profile);

    /* updateuser updates a profile */
    rpc updateuser(profile) returns (updateuserResponse);
}

message getuserRequest {
    string userid = 1;
}

message profile {
    string username = 1;
    string email = 2;
    string full_name = 3;

    string picture = 4;
    string bio = 5;
    repeated job jobs = 6 [json_name = "jobsList"];
    repeated artifact artifacts = 7 [json_name = "artifactsList"];;
    repeated string links = 8 [json_name = "linksList"];
}

message updateuserResponse{
}

message job {
    string dates = 2;
    string title = 3;
    string company = 4;
    string description = 5;
}

message artifact {
    string title = 3;
    string description = 4;
    string link = 5;
}

/* -- Upload Service -- */

/* upload service is used to upload static assets to gcs */
service upload {

    /* upload uploads a static asset to gcp and returns a url */
    rpc upload(uploadRequest) returns(uploadResponse);
}

message uploadRequest {
    string dataurl = 1;
}

message uploadResponse {
    string url = 1;
}

/* --- Search service --- */

/* search is a service that is used to find a profile/user based on a search parameter */
service search {
    rpc search(searchRequest) returns(searchResponse);
}

message searchRequest {
    string term = 1;
}

message searchResponse {
    repeated profile results = 1;
}

/* --- Search service --- */

/* Account is an account that is stored in the database */

message account {
    string username = 1;
    string email = 2;
    string preferred_name = 3;
    string name = 4;
    string password = 5;
    string salt = 6;
}
