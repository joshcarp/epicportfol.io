// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package itproject

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ItProjectClient is the client API for ItProject service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItProjectClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	RenewJWT(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type itProjectClient struct {
	cc grpc.ClientConnInterface
}

func NewItProjectClient(cc grpc.ClientConnInterface) ItProjectClient {
	return &itProjectClient{cc}
}

func (c *itProjectClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/itproject.itProject/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itProjectClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/itproject.itProject/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itProjectClient) RenewJWT(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/itproject.itProject/RenewJWT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItProjectServer is the server API for ItProject service.
// All implementations must embed UnimplementedItProjectServer
// for forward compatibility
type ItProjectServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	RenewJWT(context.Context, *LoginRequest) (*LoginResponse, error)
	mustEmbedUnimplementedItProjectServer()
}

// UnimplementedItProjectServer must be embedded to have forward compatible implementations.
type UnimplementedItProjectServer struct {
}

func (*UnimplementedItProjectServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedItProjectServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedItProjectServer) RenewJWT(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewJWT not implemented")
}
func (*UnimplementedItProjectServer) mustEmbedUnimplementedItProjectServer() {}

func RegisterItProjectServer(s *grpc.Server, srv ItProjectServer) {
	s.RegisterService(&_ItProject_serviceDesc, srv)
}

func _ItProject_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItProjectServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itproject.itProject/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItProjectServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItProject_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItProjectServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itproject.itProject/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItProjectServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItProject_RenewJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItProjectServer).RenewJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itproject.itProject/RenewJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItProjectServer).RenewJWT(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ItProject_serviceDesc = grpc.ServiceDesc{
	ServiceName: "itproject.itProject",
	HandlerType: (*ItProjectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ItProject_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _ItProject_Login_Handler,
		},
		{
			MethodName: "RenewJWT",
			Handler:    _ItProject_RenewJWT_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
